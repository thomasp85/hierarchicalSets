// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// splinePath
NumericMatrix splinePath(NumericVector x, NumericVector y, int degree, std::vector<double> knots, int detail);
RcppExport SEXP _hierarchicalSets_splinePath(SEXP xSEXP, SEXP ySEXP, SEXP degreeSEXP, SEXP knotsSEXP, SEXP detailSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< int >::type detail(detailSEXP);
    rcpp_result_gen = Rcpp::wrap(splinePath(x, y, degree, knots, detail));
    return rcpp_result_gen;
END_RCPP
}
// getSplines
List getSplines(NumericVector x, NumericVector y, IntegerVector id, int detail);
RcppExport SEXP _hierarchicalSets_getSplines(SEXP xSEXP, SEXP ySEXP, SEXP idSEXP, SEXP detailSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< int >::type detail(detailSEXP);
    rcpp_result_gen = Rcpp::wrap(getSplines(x, y, id, detail));
    return rcpp_result_gen;
END_RCPP
}
// setClustering
List setClustering(IntegerVector P, IntegerVector I, CharacterVector setNames, double threshold);
RcppExport SEXP _hierarchicalSets_setClustering(SEXP PSEXP, SEXP ISEXP, SEXP setNamesSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type P(PSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type I(ISEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type setNames(setNamesSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(setClustering(P, I, setNames, threshold));
    return rcpp_result_gen;
END_RCPP
}
// pairSummary
DataFrame pairSummary(IntegerVector P, IntegerVector I, IntegerVector order);
RcppExport SEXP _hierarchicalSets_pairSummary(SEXP PSEXP, SEXP ISEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type P(PSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type I(ISEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type order(orderSEXP);
    rcpp_result_gen = Rcpp::wrap(pairSummary(P, I, order));
    return rcpp_result_gen;
END_RCPP
}
// getOutliers
List getOutliers(List clusters, IntegerVector P, IntegerVector I, bool count);
RcppExport SEXP _hierarchicalSets_getOutliers(SEXP clustersSEXP, SEXP PSEXP, SEXP ISEXP, SEXP countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type clusters(clustersSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type P(PSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type I(ISEXP);
    Rcpp::traits::input_parameter< bool >::type count(countSEXP);
    rcpp_result_gen = Rcpp::wrap(getOutliers(clusters, P, I, count));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_hierarchicalSets_splinePath", (DL_FUNC) &_hierarchicalSets_splinePath, 5},
    {"_hierarchicalSets_getSplines", (DL_FUNC) &_hierarchicalSets_getSplines, 4},
    {"_hierarchicalSets_setClustering", (DL_FUNC) &_hierarchicalSets_setClustering, 4},
    {"_hierarchicalSets_pairSummary", (DL_FUNC) &_hierarchicalSets_pairSummary, 3},
    {"_hierarchicalSets_getOutliers", (DL_FUNC) &_hierarchicalSets_getOutliers, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_hierarchicalSets(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
